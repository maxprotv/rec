name: Generate and Update M3U Playlist

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'  # Her saat başı çalışacak

env:
  MAIN_URL: "https://m.prectv52.lol"
  SW_KEY: "4F5A9C3D9A86FA54EACEDDD635185/c3c5bd17-e37b-4b94-a944-8a3688a30452"
  AUTH_TOKEN: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhcHAiLCJwa2ciOiJjb20ucmVjdHYuc2hvdCIsImlhdCI6MTc1NTU1MjkxNSwiZXhwIjoxNzU1NTUzMDM1fQ.DYrbhnVIRrh86Lv-JEM2M0Rs6GrEkwlhA0lpGA9rehA"

jobs:
  generate-m3u:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests tqdm pyjwt

    - name: Generate M3U playlist
      run: |
        cat << 'EOF' > generate_playlist.py
        import requests
        import datetime
        import os
        import jwt
        from tqdm import tqdm
        from concurrent.futures import ThreadPoolExecutor, as_completed

        MAIN_URL = os.environ.get('MAIN_URL').strip('/')
        SW_KEY = os.environ.get('SW_KEY')
        AUTH_TOKEN = os.environ.get('AUTH_TOKEN')
        
        # API isteklerinde kullanılacak headers
        API_HEADERS = {
            "User-Agent": "okhttp/4.12.0",
            "Referer": "https://twitter.com/",
            "Authorization": f"Bearer {AUTH_TOKEN}"
        }

        # M3U dosyasına yazılacak sabit headers
        M3U_HEADERS = {
            "User-Agent": "googleusercontent",
            "Referer": "https://twitter.com/",
            "Origin": "https://twitter.com"
        }

        def get_token_expiry():
            try:
                decoded = jwt.decode(AUTH_TOKEN, options={"verify_signature": False})
                return decoded.get('exp', 0)
            except Exception as e:
                print(f"Token decode error: {e}")
                return 0

        def fetch_url(url, is_live=False):
            try:
                headers = API_HEADERS.copy()
                response = requests.get(url, headers=headers, timeout=20)
                if response.status_code == 404:
                    return None
                response.raise_for_status()
                return response.json()
            except Exception as e:
                print(f"Error fetching {url}: {e}")
                return None

        def get_all_pages(base_url, category_name, is_live=False):
            print(f"\nFetching {category_name}...")
            all_items = []
            page = 0
            
            with tqdm(desc=category_name) as pbar:
                while True:
                    url = f"{base_url}{page}/{SW_KEY}/"
                    data = fetch_url(url, is_live)
                    
                    if not data or not isinstance(data, list):
                        break
                        
                    if len(data) == 0:
                        break
                        
                    all_items.extend(data)
                    page += 1
                    pbar.update(1)
                    pbar.set_postfix({'Page': page, 'Items': len(all_items)})
            
            print(f"Total {len(all_items)} items found for {category_name}")
            return all_items

        def get_live_channels():
            print("\nFetching live channels with categories...")
            base_url = f"{MAIN_URL}/api/channel/by/filtres/0/0/"
            all_channels = get_all_pages(base_url, "Canlı Yayınlar", is_live=True)
            
            categories = {}
            for channel in all_channels:
                if not isinstance(channel, dict):
                    continue
                    
                channel_categories = channel.get('categories', [])
                if not channel_categories:
                    continue
                
                category_name = channel_categories[0].get('title')
                if not category_name:
                    continue
                
                if category_name not in categories:
                    categories[category_name] = []
                
                m3u8_sources = []
                for s in channel.get('sources', []):
                    if isinstance(s, dict) and s.get('type') == 'm3u8' and s.get('url'):
                        clean_title = channel.get('title', 'Unknown').split('(')[0].strip()
                        # URL'yi olduğu gibi bırakıyoruz, değiştirmiyoruz
                        m3u8_sources.append({
                            'url': s.get('url'),
                            'clean_title': clean_title
                        })
                
                if m3u8_sources:
                    channel['filtered_sources'] = m3u8_sources
                    categories[category_name].append(channel)
            
            return categories

        def get_movies():
            movie_categories = [
                (0, "Son Eklenen Filmler"),
                (14, "Aile Filmleri"),
                (1, "Aksiyon Filmleri"),
                (13, "Animasyon Filmleri"),
                (19, "Belgesel Filmleri"),
                (4, "Bilim Kurgu Filmleri"),
                (2, "Dram Filmleri"),
                (10, "Fantastik Filmler"),
                (3, "Komedi Filmleri"),
                (8, "Korku Filmleri"),
                (17, "Macera Filmleri"),
                (5, "Romantik Filmler")
            ]
            
            results = {}
            with ThreadPoolExecutor() as executor:
                futures = []
                for cat_id, cat_name in movie_categories:
                    base_url = f"{MAIN_URL}/api/movie/by/filtres/{cat_id}/created/"
                    futures.append(executor.submit(get_all_pages, base_url, cat_name))
                
                for future, (cat_id, cat_name) in zip(as_completed(futures), movie_categories):
                    results[cat_name] = future.result()
            
            return results

        def get_series():
            series_categories = [
                (0, "Son Eklenen Diziler"),
                (1, "Aksiyon Dizileri"),
                (2, "Dram Dizileri"),
                (3, "Komedi Dizileri"),
                (4, "Bilim Kurgu Dizileri"),
                (5, "Polisiye Diziler"),
                (6, "Romantik Diziler"),
                (7, "Tarih Dizileri")
            ]
            
            results = {}
            with ThreadPoolExecutor() as executor:
                futures = []
                for cat_id, cat_name in series_categories:
                    base_url = f"{MAIN_URL}/api/serie/by/filtres/{cat_id}/created/"
                    futures.append(executor.submit(get_all_pages, base_url, cat_name))
                
                for future, (cat_id, cat_name) in zip(as_completed(futures), series_categories):
                    results[cat_name] = future.result()
            
            return results

        def get_episodes(series_id):
            url = f"{MAIN_URL}/api/season/by/serie/{series_id}/{SW_KEY}/"
            data = fetch_url(url)
            return data if isinstance(data, list) else []

        def generate_m3u():
            print("\nStarting playlist generation...")
            
            # Token süresi kontrolü
            token_expiry = get_token_expiry()
            expiry_time = datetime.datetime.fromtimestamp(token_expiry)
            now = datetime.datetime.now()
            
            print(f"\nToken expiry: {expiry_time} (in {(expiry_time - now).total_seconds()/60:.1f} minutes)")
            
            if now > expiry_time:
                print("WARNING: Token has expired! Playlist may not work properly.")
            
            with open("playlist.m3u", "w", encoding="utf-8") as f:
                f.write("#EXTM3U\n")
                f.write(f"# Generated at: {datetime.datetime.now()}\n")
                f.write(f"# API Source: {MAIN_URL}\n")
                f.write(f"# Token Expiry: {expiry_time}\n\n")
                
                # 1. CANLI YAYINLAR
                print("\nProcessing Live Channels...")
                live_data = get_live_channels()
                for category, channels in live_data.items():
                    if not channels:
                        continue
                    
                    f.write(f'#EXTINF:-1 group-title="{category}",{category}\n')
                    for channel in channels:
                        if not isinstance(channel, dict) or not channel.get('filtered_sources'):
                            continue
                            
                        for source in channel['filtered_sources']:
                            name = source['clean_title']
                            image = channel.get('image', '')
                            url = source.get('url', '')
                            
                            if url:
                                f.write(f'#EXTINF:-1 tvg-id="{channel.get("id", "")}" tvg-name="{name}" tvg-logo="{image}" group-title="{category}",{name}\n')
                                f.write(f'#EXTVLCOPT:http-user-agent={M3U_HEADERS["User-Agent"]}\n')
                                f.write(f'#EXTVLCOPT:http-referrer={M3U_HEADERS["Referer"]}\n')
                                f.write(f'#EXTVLCOPT:http-origin={M3U_HEADERS["Origin"]}\n')
                                f.write(f"{url}\n\n")
                
                # 2. FİLMLER
                print("\nProcessing Movies...")
                movie_data = get_movies()
                for category, movies in movie_data.items():
                    if not movies:
                        continue
                    
                    f.write(f'#EXTINF:-1 group-title="{category}",{category}\n')
                    for movie in movies:
                        if not isinstance(movie, dict) or not movie.get('sources'):
                            continue
                            
                        name = movie.get('title', 'Unknown')
                        image = movie.get('image', '')
                        url = movie['sources'][0].get('url', '')
                        
                        if url:
                            f.write(f'#EXTINF:-1 tvg-id="{movie.get("id", "")}" tvg-name="{name}" tvg-logo="{image}" group-title="{category}",{name}\n')
                            f.write(f'#EXTVLCOPT:http-user-agent={M3U_HEADERS["User-Agent"]}\n')
                            f.write(f'#EXTVLCOPT:http-referrer={M3U_HEADERS["Referer"]}\n')
                            f.write(f'#EXTVLCOPT:http-origin={M3U_HEADERS["Origin"]}\n')
                            f.write(f"{url}\n\n")
                
                # 3. DİZİLER
                print("\nProcessing Series...")
                series_data = get_series()
                for category, series in series_data.items():
                    if not series:
                        continue
                    
                    f.write(f'#EXTINF:-1 group-title="{category}",{category}\n')
                    
                    with ThreadPoolExecutor() as executor:
                        futures = []
                        for serie in series:
                            if not isinstance(serie, dict) or not serie.get('id'):
                                continue
                                
                            futures.append(executor.submit(get_episodes, serie['id']))
                        
                        added_episodes = set()
                        
                        for future, serie in zip(as_completed(futures), series):
                            episodes = future.result()
                            if not episodes:
                                continue
                                
                            serie_name = serie.get('title', 'Unknown')
                            serie_image = serie.get('image', '')
                            
                            for season in episodes:
                                if not isinstance(season, dict) or not season.get('episodes'):
                                    continue
                                    
                                for episode in season['episodes']:
                                    if not isinstance(episode, dict) or not episode.get('sources'):
                                        continue
                                        
                                    url = episode['sources'][0].get('url', '')
                                    if url:
                                        season_num = ''.join(filter(str.isdigit, season.get('title', ''))) or '0'
                                        episode_num = ''.join(filter(str.isdigit, episode.get('title', ''))) or '0'
                                        ep_id = f"{serie_name}-S{season_num}E{episode_num}"
                                        
                                        if ep_id not in added_episodes:
                                            added_episodes.add(ep_id)
                                            ep_name = f"{serie_name} S{season_num}E{episode_num}"
                                            f.write(f'#EXTINF:-1 tvg-id="{episode.get("id", "")}" tvg-name="{ep_name}" tvg-logo="{serie_image}" group-title="{category}",{ep_name}\n')
                                            f.write(f'#EXTVLCOPT:http-user-agent={M3U_HEADERS["User-Agent"]}\n')
                                            f.write(f'#EXTVLCOPT:http-referrer={M3U_HEADERS["Referer"]}\n')
                                            f.write(f'#EXTVLCOPT:http-origin={M3U_HEADERS["Origin"]}\n')
                                            f.write(f"{url}\n\n")
            
            print("\nPlaylist generation completed successfully!")

        if __name__ == "__main__":
            generate_m3u()
        EOF
        
        python generate_playlist.py
        
    - name: Commit and push changes
      if: success()
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add playlist.m3u
        git diff --quiet && git diff --staged --quiet || git commit -m "Update M3U playlist [auto]"
        git push
